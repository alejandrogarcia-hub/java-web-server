name: Docker Build & Publish

on:
  # Trigger when a release is published
  release:
    types: [published]

  # Manual trigger for testing or custom builds
  workflow_dispatch:
    inputs:
      tag:
        description: "Image tag (e.g., 1.2.3, staging, dev)"
        required: true
        default: "dev"
      platforms:
        description: "Comma-separated target platforms"
        required: false
        default: "linux/amd64"

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  build-and-push:
    runs-on: ubuntu-latest

    permissions:
      contents: read
      packages: write
      attestations: write
      id-token: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Full history for git metadata in Docker labels

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Resolve build metadata
        id: build
        shell: bash
        env:
          RELEASE_TAG: ${{ github.event.release.tag_name || '' }}
        run: |
          # Platform selection strategy:
          # - Release builds: multi-platform (amd64 + arm64) for broad compatibility
          # - Manual dispatch: configurable platforms (default: amd64 only for fast iteration)
          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
              VERSION="${{ github.event.inputs.tag }}"
              PLATFORMS="${{ github.event.inputs.platforms }}"
          else
              VERSION="${RELEASE_TAG#v}"
              PLATFORMS="linux/amd64,linux/arm64"
          fi

          if [[ -z "$VERSION" ]]; then
              echo "ERROR: Could not determine image version"
              exit 1
          fi

          if [[ "$VERSION" =~ ^[0-9]+\.[0-9]+\.[0-9]+(-[A-Za-z0-9.]+)?$ ]]; then
              echo "semver=true" >> "$GITHUB_OUTPUT"
          else
              echo "semver=false" >> "$GITHUB_OUTPUT"
          fi

          echo "VERSION=$VERSION" >> "$GITHUB_ENV"
          echo "version=$VERSION" >> "$GITHUB_OUTPUT"
          echo "PLATFORMS=$PLATFORMS" >> "$GITHUB_ENV"
          echo "platforms=$PLATFORMS" >> "$GITHUB_OUTPUT"
          echo "Building Docker image with version: $VERSION for platforms: $PLATFORMS"

      - name: Extract Docker metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=semver,pattern={{version}},value=${{ env.VERSION }},enable=${{ steps.build.outputs.semver == 'true' }}
            type=semver,pattern={{major}}.{{minor}},value=${{ env.VERSION }},enable=${{ steps.build.outputs.semver == 'true' }}
            type=semver,pattern={{major}},value=${{ env.VERSION }},enable=${{ steps.build.outputs.semver == 'true' }}
            type=raw,value=${{ env.VERSION }}
            type=raw,value=latest,enable=${{ steps.build.outputs.semver == 'true' && !contains(env.VERSION, '-') && github.event_name != 'workflow_dispatch' }}
            type=sha,prefix=sha-
          labels: |
            org.opencontainers.image.title=Java Web Server
            org.opencontainers.image.description=Multi-threaded HTTP/1.1 web server with thread-pooling and keep-alive support
            org.opencontainers.image.version=${{ env.VERSION }}

      - name: Build and push Docker image
        id: build-push
        uses: docker/build-push-action@v6
        with:
          context: .
          platforms: ${{ steps.build.outputs.platforms }}
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          provenance: true
          sbom: true

      - name: Generate artifact attestation
        uses: actions/attest-build-provenance@v1
        with:
          subject-name: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          subject-digest: ${{ steps.build-push.outputs.digest }}
          push-to-registry: true

      - name: Validate build
        run: |
          echo "Validating Docker image manifest..."
          docker manifest inspect ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ env.VERSION }}

      - name: Output image details
        run: |
          echo "### Docker Image Published :rocket:" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Version:** \`${{ env.VERSION }}\`" >> $GITHUB_STEP_SUMMARY
          echo "**Registry:** \`${{ env.REGISTRY }}\`" >> $GITHUB_STEP_SUMMARY
          echo "**Image:** \`${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}\`" >> $GITHUB_STEP_SUMMARY
          echo "**Platforms:** \`${{ steps.build.outputs.platforms }}\`" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Tags:**" >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
          echo "${{ steps.meta.outputs.tags }}" >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Pull command:**" >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`bash" >> $GITHUB_STEP_SUMMARY
          echo "docker pull ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ env.VERSION }}" >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
