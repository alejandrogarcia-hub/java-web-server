/*
 * This source file was generated by the Gradle 'init' task
 */
package ch.alejandrogarciahub.webserver;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.slf4j.MDC;

public class WebServer {
    // Static initializer to configure logback BEFORE logger is created
    static {
        if (System.getProperty("logback.configurationFile") == null) {
            String env = System.getenv().getOrDefault("ENV", "dev");
            String logbackConfig = "logback-" + env + ".xml";
            System.setProperty("logback.configurationFile", logbackConfig);
        }
    }

    private static final Logger logger = LoggerFactory.getLogger(WebServer.class);

    public final String getGreeting() {
        return "Hello World!";
    }

    public static void main(final String[] args) {
        // Log application startup
        String env = System.getenv().getOrDefault("ENV", "dev");
        logger.info("Starting Java Web Server");
        logger.debug("Environment: {}", env);

        // Test various log levels
        logger.trace("This is a TRACE message");
        logger.debug("This is a DEBUG message with greeting: {}", new WebServer().getGreeting());
        logger.info("This is an INFO message");
        logger.warn("This is a WARN message");
        logger.error("This is an ERROR message");

        // Test MDC (Mapped Diagnostic Context) for correlation IDs
        MDC.put("requestId", "test-req-123");
        MDC.put("userId", "user-456");
        logger.info("Testing MDC context - this log should include requestId and userId");
        MDC.clear();

        // Test exception logging
        try {
            throw new RuntimeException("Test exception for logging demonstration");
        } catch (Exception e) {
            logger.error("Caught exception during startup test", e);
        }

        logger.info("Web Server initialization complete");
        System.out.println(new WebServer().getGreeting());
    }
}
