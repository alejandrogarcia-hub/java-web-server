/*
 * This file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Java application project to get you started.
 * For more details on building Java & JVM projects, please refer to https://docs.gradle.org/9.1.0/userguide/building_java_projects.html in the Gradle documentation.
 * This project uses @Incubating APIs which are subject to change.
 */

plugins {
    // Apply the application plugin to add support for building a CLI application in Java.
    application
    java
    checkstyle
    id("com.diffplug.spotless") version "7.0.2"
}

repositories {
    // Use Maven Central for resolving dependencies.
    mavenCentral()
}

dependencies {
    // This dependency is used by the application.
    implementation(libs.guava)

    // Testing
    testImplementation("org.junit.jupiter:junit-jupiter:5.10.1")
    testImplementation("org.mockito:mockito-core:5.8.0")
    testImplementation("org.assertj:assertj-core:3.24.2")
    
    // Logging
    implementation("org.slf4j:slf4j-api:2.0.9")
    implementation("ch.qos.logback:logback-classic:1.4.14")
    implementation("net.logstash.logback:logstash-logback-encoder:8.1")
}

testing {
    suites {
        // Configure the built-in test suite
        val test by getting(JvmTestSuite::class) {
            // Use JUnit Jupiter test framework
            useJUnitJupiter("5.12.1")
        }
    }
}

// Apply a specific Java toolchain to ease working on different environments.
java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(21)
    }
}

application {
    // Define the main class for the application.
    mainClass = "ch.alejandrogarciahub.webserver.WebServer"
}

tasks.named<Jar>("jar") {
    manifest {
        attributes["Main-Class"] = "ch.alejandrogarciahub.webserver.WebServer"
        attributes["Implementation-Version"] = project.version
    }
    // Configure JAR naming: java-web-server-{version}.jar
    archiveBaseName.set("java-web-server")
    archiveVersion.set(project.version.toString())

    // Create a fat JAR with all dependencies
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE
    from(configurations.runtimeClasspath.get().map { if (it.isDirectory) it else zipTree(it) })
}

tasks.named<Test>("test") {
    useJUnitPlatform()
}

// Spotless configuration for code formatting
spotless {
    java {
        target("src/**/*.java")
        googleJavaFormat("1.25.2")  // Latest version for Java 21
        removeUnusedImports()
        trimTrailingWhitespace()
        endWithNewline()
    }

    format("misc") {
        target("*.md", ".gitignore")
        trimTrailingWhitespace()
        endWithNewline()
    }
}

// Checkstyle configuration for style linting
checkstyle {
    toolVersion = "10.20.2"
    configFile = file("${rootProject.projectDir}/config/checkstyle/checkstyle.xml")
    maxWarnings = 0  // Fail on any warnings (strict mode)
    maxErrors = 0
}

// Integrate quality checks into build task
tasks.named("build") {
    dependsOn("spotlessCheck", "checkstyleMain", "checkstyleTest")
}
